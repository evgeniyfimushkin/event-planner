name: build and push auth-service

on:
  push:
    branches:
      - backend

jobs:
  publish:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service:
          - auth-service
          - event-service
          - registration-service

    steps:
      - name: checkout repository
        uses: actions/checkout@v2

      - name: Build docker image for ${{ matrix.service }}
        run: |
          docker build -t evgeniyfimushkin/${{ matrix.service }}:latest services/${{ matrix.service }}

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push docker image for ${{ matrix.service }}
        run: docker push evgeniyfimushkin/${{ matrix.service }}:latest

  deploy:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Copy application files to server
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.REMOTE_HOST }} >> ~/.ssh/known_hosts
          ssh -i ~/.ssh/id_rsa ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} "mkdir -p ~/event-planner"
          ssh -i ~/.ssh/id_rsa ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} "mkdir -p ~/event-planner/promtail"
          ssh -i ~/.ssh/id_rsa ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} "mkdir -p ~/event-planner/prometheus"
          sed -i "s/localhost/${{ secrets.DOMAIN }}/g" ./services/nginx/conf.d/front-and-auth.conf
          scp -i ~/.ssh/id_rsa ./services/nginx/conf.d/front-and-auth.conf ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:event-planner/nginx/conf.d/front-and-auth.conf
          scp -r -i ~/.ssh/id_rsa ./services ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:event-planner
          scp -i ~/.ssh/id_rsa ./services/nginx/conf.d/front-and-auth.conf ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:event-planner/nginx/conf.d/front-and-auth.conf
          scp -i ~/.ssh/id_rsa ./services/database/init.sql ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:event-planner/database/init.sql
          scp -i ~/.ssh/id_rsa ./services/docker-compose.yaml ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:event-planner/docker-compose.yaml
          scp -i ~/.ssh/id_rsa ./services/promtail/promtail.yaml ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:event-planner/promtail/promtail.yaml
          scp -i ~/.ssh/id_rsa ./services/prometheus/prometheus.yml ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:event-planner/prometheus/prometheus.yml

      - name: Deploy SSL certificates
        run: |
          printf "%s" "${{ secrets.SSL_CERT }}" > fullchain.pem
          printf "%s" "${{ secrets.SSL_KEY }}" > certificate.key
          sudo chmod 600 certificate.key
          ssh -i ~/.ssh/id_rsa ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} "mkdir -p ~/event-planner/nginx/ssl"
          scp -i ~/.ssh/id_rsa fullchain.pem ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:event-planner/nginx/ssl/fullchain.pem
          scp -i ~/.ssh/id_rsa certificate.key ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:event-planner/nginx/ssl/certificate.key

      - name: Start application containers
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd event-planner
            export ENV=prod
            export PUBLIC_KEY=${{ secrets.PUBLIC_KEY }}
            export PRIVATE_KEY=${{ secrets.PRIVATE_KEY }}
            export POSTGRES_HOST=db
            export POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            docker ps | awk '{system("docker rmi "$1)}'
            docker-compose pull
            docker-compose down
            docker-compose up -d
